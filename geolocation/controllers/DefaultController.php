<?php

use Thrift\Protocol\TJSONProtocol;
use Thrift\Transport\TBufferedTransport;
use Thrift\Transport\TPhpStream;

class DefaultController extends CController
{
    /**
     * Handles thrift geolocation service requests
     * @see "https://github.com/robwilkerson/Thrift-Client-Server-Example--PHP-"
     * @see "http://willwarren.com/2012/01/24/creating-a-public-api-with-apache-thrift/"
     */
    public function actionIndex()
    {
        header( 'Content-Type', 'application/x-thrift' );
 
        // $handler is our implementation of the thrift service interface.
        // it could have been the module itself, but I want to keep the
        // generated classes (parameters, return values) hidden from the modules
        // API.
        $componentId = $this->module->geolocationId;
        $handler     = $this->module->getComponent( $componentId );
        
        // the processor has been generated by the thrift compiler...
        $processor = new \bwoester\geolocation\GeolocationProcessor( $handler );
                
        $stream    = new TPhpStream( TPhpStream::MODE_R | TPhpStream::MODE_W );
        $transport = new TBufferedTransport( $stream );
        $protocol  = new TJSONProtocol( $transport );
        
        $transport->open();
        $processor->process( $protocol, $protocol );
        $transport->close();
        
        Yii::app()->end();
    }
    
    public function actionClient()
    {
        $this->render('client',array(
        ));
    }
}