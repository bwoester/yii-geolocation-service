<?php
namespace bwoester\geolocation;
/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


interface GeolocationIf {
  public function addPosition($id, \bwoester\geolocation\Position $position);
  public function batchAddPositions($id, $positions);
  public function streamPosition($id, \bwoester\geolocation\Position $position);
  public function batchStreamPositions($id, $positions);
}

class GeolocationClient implements \bwoester\geolocation\GeolocationIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function addPosition($id, \bwoester\geolocation\Position $position)
  {
    $this->send_addPosition($id, $position);
    return $this->recv_addPosition();
  }

  public function send_addPosition($id, \bwoester\geolocation\Position $position)
  {
    $args = new \bwoester\geolocation\Geolocation_addPosition_args();
    $args->id = $id;
    $args->position = $position;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addPosition', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addPosition', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addPosition()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\bwoester\geolocation\Geolocation_addPosition_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \bwoester\geolocation\Geolocation_addPosition_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addPosition failed: unknown result");
  }

  public function batchAddPositions($id, $positions)
  {
    $this->send_batchAddPositions($id, $positions);
    return $this->recv_batchAddPositions();
  }

  public function send_batchAddPositions($id, $positions)
  {
    $args = new \bwoester\geolocation\Geolocation_batchAddPositions_args();
    $args->id = $id;
    $args->positions = $positions;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batchAddPositions', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batchAddPositions', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batchAddPositions()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\bwoester\geolocation\Geolocation_batchAddPositions_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \bwoester\geolocation\Geolocation_batchAddPositions_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("batchAddPositions failed: unknown result");
  }

  public function streamPosition($id, \bwoester\geolocation\Position $position)
  {
    $this->send_streamPosition($id, $position);
    $this->recv_streamPosition();
  }

  public function send_streamPosition($id, \bwoester\geolocation\Position $position)
  {
    $args = new \bwoester\geolocation\Geolocation_streamPosition_args();
    $args->id = $id;
    $args->position = $position;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'streamPosition', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('streamPosition', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_streamPosition()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\bwoester\geolocation\Geolocation_streamPosition_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \bwoester\geolocation\Geolocation_streamPosition_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function batchStreamPositions($id, $positions)
  {
    $this->send_batchStreamPositions($id, $positions);
    $this->recv_batchStreamPositions();
  }

  public function send_batchStreamPositions($id, $positions)
  {
    $args = new \bwoester\geolocation\Geolocation_batchStreamPositions_args();
    $args->id = $id;
    $args->positions = $positions;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batchStreamPositions', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batchStreamPositions', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batchStreamPositions()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\bwoester\geolocation\Geolocation_batchStreamPositions_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \bwoester\geolocation\Geolocation_batchStreamPositions_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class Geolocation_addPosition_args extends TBase {
  static $_TSPEC;

  public $id = null;
  public $position = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'position',
          'type' => TType::STRUCT,
          'class' => '\bwoester\geolocation\Position',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Geolocation_addPosition_args';
  }

  public function read($input)
  {
    return $this->_read('Geolocation_addPosition_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Geolocation_addPosition_args', self::$_TSPEC, $output);
  }
}

class Geolocation_addPosition_result extends TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Geolocation_addPosition_result';
  }

  public function read($input)
  {
    return $this->_read('Geolocation_addPosition_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Geolocation_addPosition_result', self::$_TSPEC, $output);
  }
}

class Geolocation_batchAddPositions_args extends TBase {
  static $_TSPEC;

  public $id = null;
  public $positions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'positions',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\bwoester\geolocation\Position',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Geolocation_batchAddPositions_args';
  }

  public function read($input)
  {
    return $this->_read('Geolocation_batchAddPositions_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Geolocation_batchAddPositions_args', self::$_TSPEC, $output);
  }
}

class Geolocation_batchAddPositions_result extends TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Geolocation_batchAddPositions_result';
  }

  public function read($input)
  {
    return $this->_read('Geolocation_batchAddPositions_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Geolocation_batchAddPositions_result', self::$_TSPEC, $output);
  }
}

class Geolocation_streamPosition_args extends TBase {
  static $_TSPEC;

  public $id = null;
  public $position = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'position',
          'type' => TType::STRUCT,
          'class' => '\bwoester\geolocation\Position',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Geolocation_streamPosition_args';
  }

  public function read($input)
  {
    return $this->_read('Geolocation_streamPosition_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Geolocation_streamPosition_args', self::$_TSPEC, $output);
  }
}

class Geolocation_streamPosition_result extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'Geolocation_streamPosition_result';
  }

  public function read($input)
  {
    return $this->_read('Geolocation_streamPosition_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Geolocation_streamPosition_result', self::$_TSPEC, $output);
  }
}

class Geolocation_batchStreamPositions_args extends TBase {
  static $_TSPEC;

  public $id = null;
  public $positions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'positions',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\bwoester\geolocation\Position',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Geolocation_batchStreamPositions_args';
  }

  public function read($input)
  {
    return $this->_read('Geolocation_batchStreamPositions_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Geolocation_batchStreamPositions_args', self::$_TSPEC, $output);
  }
}

class Geolocation_batchStreamPositions_result extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'Geolocation_batchStreamPositions_result';
  }

  public function read($input)
  {
    return $this->_read('Geolocation_batchStreamPositions_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Geolocation_batchStreamPositions_result', self::$_TSPEC, $output);
  }
}

class GeolocationProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_addPosition($seqid, $input, $output) {
    $args = new \bwoester\geolocation\Geolocation_addPosition_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \bwoester\geolocation\Geolocation_addPosition_result();
    $result->success = $this->handler_->addPosition($args->id, $args->position);
    $bin_accel = ($output instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'addPosition', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('addPosition', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_batchAddPositions($seqid, $input, $output) {
    $args = new \bwoester\geolocation\Geolocation_batchAddPositions_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \bwoester\geolocation\Geolocation_batchAddPositions_result();
    $result->success = $this->handler_->batchAddPositions($args->id, $args->positions);
    $bin_accel = ($output instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'batchAddPositions', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('batchAddPositions', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_streamPosition($seqid, $input, $output) {
    $args = new \bwoester\geolocation\Geolocation_streamPosition_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \bwoester\geolocation\Geolocation_streamPosition_result();
    $this->handler_->streamPosition($args->id, $args->position);
    $bin_accel = ($output instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'streamPosition', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('streamPosition', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_batchStreamPositions($seqid, $input, $output) {
    $args = new \bwoester\geolocation\Geolocation_batchStreamPositions_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \bwoester\geolocation\Geolocation_batchStreamPositions_result();
    $this->handler_->batchStreamPositions($args->id, $args->positions);
    $bin_accel = ($output instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'batchStreamPositions', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('batchStreamPositions', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}

