//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

Coordinates = function(args) {
  this.latitude = null;
  this.longitude = null;
  this.altitude = null;
  this.accuracy = null;
  this.altitudeAccuracy = null;
  this.heading = null;
  this.speed = null;
  if (args) {
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
    if (args.altitude !== undefined) {
      this.altitude = args.altitude;
    }
    if (args.accuracy !== undefined) {
      this.accuracy = args.accuracy;
    }
    if (args.altitudeAccuracy !== undefined) {
      this.altitudeAccuracy = args.altitudeAccuracy;
    }
    if (args.heading !== undefined) {
      this.heading = args.heading;
    }
    if (args.speed !== undefined) {
      this.speed = args.speed;
    }
  }
};
Coordinates.prototype = {};
Coordinates.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.altitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.accuracy = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.altitudeAccuracy = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.heading = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.speed = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Coordinates.prototype.write = function(output) {
  output.writeStructBegin('Coordinates');
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.altitude !== null && this.altitude !== undefined) {
    output.writeFieldBegin('altitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.altitude);
    output.writeFieldEnd();
  }
  if (this.accuracy !== null && this.accuracy !== undefined) {
    output.writeFieldBegin('accuracy', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.accuracy);
    output.writeFieldEnd();
  }
  if (this.altitudeAccuracy !== null && this.altitudeAccuracy !== undefined) {
    output.writeFieldBegin('altitudeAccuracy', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.altitudeAccuracy);
    output.writeFieldEnd();
  }
  if (this.heading !== null && this.heading !== undefined) {
    output.writeFieldBegin('heading', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.heading);
    output.writeFieldEnd();
  }
  if (this.speed !== null && this.speed !== undefined) {
    output.writeFieldBegin('speed', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.speed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Position = function(args) {
  this.coords = null;
  this.timestamp = null;
  if (args) {
    if (args.coords !== undefined) {
      this.coords = args.coords;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
  }
};
Position.prototype = {};
Position.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.coords = new Coordinates();
        this.coords.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Position.prototype.write = function(output) {
  output.writeStructBegin('Position');
  if (this.coords !== null && this.coords !== undefined) {
    output.writeFieldBegin('coords', Thrift.Type.STRUCT, 1);
    this.coords.write(output);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

