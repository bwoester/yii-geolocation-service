//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Geolocation_addPosition_args = function(args) {
  this.id = null;
  this.position = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.position !== undefined) {
      this.position = args.position;
    }
  }
};
Geolocation_addPosition_args.prototype = {};
Geolocation_addPosition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.position = new Position();
        this.position.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Geolocation_addPosition_args.prototype.write = function(output) {
  output.writeStructBegin('Geolocation_addPosition_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.STRUCT, 2);
    this.position.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Geolocation_addPosition_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Geolocation_addPosition_result.prototype = {};
Geolocation_addPosition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Geolocation_addPosition_result.prototype.write = function(output) {
  output.writeStructBegin('Geolocation_addPosition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Geolocation_batchAddPositions_args = function(args) {
  this.id = null;
  this.positions = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.positions !== undefined) {
      this.positions = args.positions;
    }
  }
};
Geolocation_batchAddPositions_args.prototype = {};
Geolocation_batchAddPositions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.positions = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Position();
          elem6.read(input);
          this.positions.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Geolocation_batchAddPositions_args.prototype.write = function(output) {
  output.writeStructBegin('Geolocation_batchAddPositions_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.positions !== null && this.positions !== undefined) {
    output.writeFieldBegin('positions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.positions.length);
    for (var iter7 in this.positions)
    {
      if (this.positions.hasOwnProperty(iter7))
      {
        iter7 = this.positions[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Geolocation_batchAddPositions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Geolocation_batchAddPositions_result.prototype = {};
Geolocation_batchAddPositions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Geolocation_batchAddPositions_result.prototype.write = function(output) {
  output.writeStructBegin('Geolocation_batchAddPositions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Geolocation_streamPosition_args = function(args) {
  this.id = null;
  this.position = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.position !== undefined) {
      this.position = args.position;
    }
  }
};
Geolocation_streamPosition_args.prototype = {};
Geolocation_streamPosition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.position = new Position();
        this.position.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Geolocation_streamPosition_args.prototype.write = function(output) {
  output.writeStructBegin('Geolocation_streamPosition_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.STRUCT, 2);
    this.position.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Geolocation_streamPosition_result = function(args) {
};
Geolocation_streamPosition_result.prototype = {};
Geolocation_streamPosition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Geolocation_streamPosition_result.prototype.write = function(output) {
  output.writeStructBegin('Geolocation_streamPosition_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Geolocation_batchStreamPositions_args = function(args) {
  this.id = null;
  this.positions = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.positions !== undefined) {
      this.positions = args.positions;
    }
  }
};
Geolocation_batchStreamPositions_args.prototype = {};
Geolocation_batchStreamPositions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.positions = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new Position();
          elem14.read(input);
          this.positions.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Geolocation_batchStreamPositions_args.prototype.write = function(output) {
  output.writeStructBegin('Geolocation_batchStreamPositions_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.positions !== null && this.positions !== undefined) {
    output.writeFieldBegin('positions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.positions.length);
    for (var iter15 in this.positions)
    {
      if (this.positions.hasOwnProperty(iter15))
      {
        iter15 = this.positions[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Geolocation_batchStreamPositions_result = function(args) {
};
Geolocation_batchStreamPositions_result.prototype = {};
Geolocation_batchStreamPositions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Geolocation_batchStreamPositions_result.prototype.write = function(output) {
  output.writeStructBegin('Geolocation_batchStreamPositions_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GeolocationClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
GeolocationClient.prototype = {};
GeolocationClient.prototype.addPosition = function(id, position, callback) {
  if (callback === undefined) {
    this.send_addPosition(id, position);
    return this.recv_addPosition();
  } else {
    var postData = this.send_addPosition(id, position, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addPosition);
  }
};

GeolocationClient.prototype.send_addPosition = function(id, position, callback) {
  this.output.writeMessageBegin('addPosition', Thrift.MessageType.CALL, this.seqid);
  var args = new Geolocation_addPosition_args();
  args.id = id;
  args.position = position;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

GeolocationClient.prototype.recv_addPosition = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Geolocation_addPosition_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'addPosition failed: unknown result';
};
GeolocationClient.prototype.batchAddPositions = function(id, positions, callback) {
  if (callback === undefined) {
    this.send_batchAddPositions(id, positions);
    return this.recv_batchAddPositions();
  } else {
    var postData = this.send_batchAddPositions(id, positions, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_batchAddPositions);
  }
};

GeolocationClient.prototype.send_batchAddPositions = function(id, positions, callback) {
  this.output.writeMessageBegin('batchAddPositions', Thrift.MessageType.CALL, this.seqid);
  var args = new Geolocation_batchAddPositions_args();
  args.id = id;
  args.positions = positions;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

GeolocationClient.prototype.recv_batchAddPositions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Geolocation_batchAddPositions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'batchAddPositions failed: unknown result';
};
GeolocationClient.prototype.streamPosition = function(id, position, callback) {
  if (callback === undefined) {
    this.send_streamPosition(id, position);
    this.recv_streamPosition();
  } else {
    var postData = this.send_streamPosition(id, position, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_streamPosition);
  }
};

GeolocationClient.prototype.send_streamPosition = function(id, position, callback) {
  this.output.writeMessageBegin('streamPosition', Thrift.MessageType.CALL, this.seqid);
  var args = new Geolocation_streamPosition_args();
  args.id = id;
  args.position = position;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

GeolocationClient.prototype.recv_streamPosition = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Geolocation_streamPosition_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
GeolocationClient.prototype.batchStreamPositions = function(id, positions, callback) {
  if (callback === undefined) {
    this.send_batchStreamPositions(id, positions);
    this.recv_batchStreamPositions();
  } else {
    var postData = this.send_batchStreamPositions(id, positions, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_batchStreamPositions);
  }
};

GeolocationClient.prototype.send_batchStreamPositions = function(id, positions, callback) {
  this.output.writeMessageBegin('batchStreamPositions', Thrift.MessageType.CALL, this.seqid);
  var args = new Geolocation_batchStreamPositions_args();
  args.id = id;
  args.positions = positions;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

GeolocationClient.prototype.recv_batchStreamPositions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Geolocation_batchStreamPositions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
